## Using the Dynamic Data Mapping framework

Since Liferay 6.2 all portlets supporting data structures and/or display templates make use of the generic API provided by the Dynamic Data Mapping (DDM) framework, deprecating their old specific APIs. For instance, the JournalStructure and JournalTemplate services are deprecated in favor of DDMStructure and DDMTemplate services, respectively.

The DDM framework was introduced in Liferay 6.1. It provides the services and GUI to handle complex XML based data structures and Freemarker or Velocity based templates.

The following Liferay portlets make use of the DDM framework:

- Dynamic Data Lists, for Data Definitions, Form Templates and Display Templates (since 6.1)
- Document and Media, for Document Types and Metadata Sets (since 6.1)
- Web Content, for Structures and Templates (since 6.2)
- Application Display Templates (since 6.2)


### Using DDM services to handle structures and templates in your custom portlets

As mentioned above, the DDMStructureService and the DDMTemplateService provide a generic API to handle complex data structures and display templates. A portlet developer can make use of this API to support structures and templates for his own purposes.

DDMStructures are basically data input definitions written in XML. They can refer to other entities through their classNameId field. For example, DDMStructures for Web Content contain the classNameId of the JournalArticle entity. Content generated by filling a DDMStructure data definition can be stored as a DDMContent (using the DDMContentService) or in your own service structure.

DDMTemplates are basically data output displays. They are usually (but not only) used to render content generated with an specific DDMStructure. In that case, the classNameId of the DDMTemplate is that of the DDMStructure class, while the classPK is the primary key of that specific DDMStructure. A DDMStructure may have more than one associated DDMTemplates to render the same data in different ways, but a DDMTemplate is valid for only one DDMStructure.

### Customize the DDM GUI for your custom portlets

Apart from the services described above, the DDM framework also provides a generic GUI to manage structures and templates. Portlets using the DDM services can include their own custom views for this purpose, or reuse the mentioned generic GUI.

Even if portlets reuse the generic GUI, developers can still define specific behaviors for that specific portlet. For example, displaying a custom title or hiding some columns in the template list. For this purpose, since Liferay 6.2 the DDM Framework provides the DDMDisplay interface and the BaseDDMDisplay class.

If you want to customize how the DDM generic GUI behaves for your portlet, follow these steps:

1. Create an implementation of the DDMDisplay interface. It should extend 
    BaseDDMDisplay so that it inherits default behaviors when not specified.

    public class MyPortletDDMDisplay extends BaseDDMDisplay {

    ...

    }
	
2. Declare this custom DDMDisplay in the liferay-portlet.xml file:

    <portlet>

    
	<ddm-display>com.liferay.portlet.myportlet.ddm.MyPortletDDMDisplay</ddm-display>

    </portlet>


In the chapter for ADT you could eventually mention that it's internally based on DDM, an link to the chapter mentioned above. But once again, we shouldn't mention ADT (an specific use case) inside the DDM nor the DDMDisplay (generic framework) documentation.

<div class="video-tag" data-name="Creating Content with Structures and Templates">
  <video width="100%" height="100%" controls>
    <source src="https://dev.liferay.com/documents/10184/1058908/creating-content-with-structures-and-templates.mp4" type="video/mp4">
    <source src="https://dev.liferay.com/documents/10184/1058908/creating-content-with-structures-and-templates.webm" type="video/webm">
    Your browser does not support HTML5 video.
  </video>
</div>
