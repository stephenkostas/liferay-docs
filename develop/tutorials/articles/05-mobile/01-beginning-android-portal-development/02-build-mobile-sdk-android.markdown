# Building the Guestbook Mobile SDK [](id=building-the-guestbook-mobile-sdk)

Once you've deployed the Guestbook portlet to your Liferay instance, you're 
ready to build the Guestbook Mobile SDK. You might be asking yourself, "Why do I 
have to build a separate Mobile SDK? Can't I just use the pre-built Mobile SDK 
that Liferay already provides?" Fantastic question! The reason is that the 
pre-built Mobile SDK provided by Liferay includes only classes for calling the 
remote services of Liferay's *core* portlets. Core portlets are the portlets 
included with every Liferay installation (also referred to as *out-of-the-box* 
portlets). Since you'll be calling the 
[Guestbook portlet's](/develop/tutorials/-/knowledge_base/6-2/writing-your-first-liferay-application) 
remote services, you have to build a separate Mobile SDK for them. This is the 
case with any non-core portlet: you must build a Mobile SDK if you want to use 
it to call your portlet's remote services. Now it's time to get building! 

## Building the Mobile SDK [](id=building-the-mobile-sdk)

Liferay provides a Mobile SDK Builder as part of the Liferay Mobile SDK source 
code. For the Mobile SDK Builder to generate the classes that can call a 
non-core portlet's remote services, those services must be available and 
accompanied by a Web Service Deployment Descriptor (WSDD). To learn how the 
Guestbook portlet's remote services and WSDD were generated, please see 
[Creating Web Services for Your Application](/develop/tutorials/-/knowledge_base/6-2/creating-web-services-for-your-application).
Since the Guestbook application's web services have already been generated, you
don't need to take this step here. Just remember that you need to generate web
services when developing your own applications.

To build the Mobile SDK, you first need to download its source code. You can do 
so by clicking [this link](https://github.com/liferay/liferay-mobile-sdk/archive/android-6.2.0.22.zip). 
Unzip the file to a location on your machine where you want the Mobile SDK 
to reside. This is purely personal preference; it works the same regardless of 
where it is. Once unzipped, the source code for this version of the Mobile SDK 
is in the `liferay-mobile-sdk-android-6.2.0.22` folder. Now you're ready to 
build a Mobile SDK for the Guestbook portlet! The Mobile SDK Builder contains a 
convenient command line wizard for helping you with this step. To start it, 
navigate to the `liferay-mobile-sdk-android-6.2.0.22` directory and issue the 
following command:

    ./gradlew createModule

The wizard launches and then asks you to enter some properties for your project. 
You're first asked to provide the project's `Context` property. This needs to be 
set to the context path of the Guestbook portlet's remote services. To view the 
available remote service context paths for your portal, navigate to 
[http://localhost:8080/api/jsonws](http://localhost:8080/api/jsonws). On the 
page's upper left, there's a menu for selecting the context path. Select 
*guestbook-portlet*. The UI updates to show only the remote services available 
in the selected context path. 

![Figure 1: The guestbook-portlet context path on the server.](../../../images/remote-services-context.png)

The Mobile SDK Builder needs this value so that it knows what remote services to 
generate classes and methods for. Return to the terminal and enter 
`guestbook-portlet` for the `Context` property.

Next, you're asked for the build's `Package Name` property. This is the package 
path for the classes generated by the Mobile SDK Builder. Accept the default 
value of `com.liferay.mobile.android`. The last property the Mobile SDK Builder 
asks for is the `POM Description`. Technically, this is only needed if you're 
planning to publish your generated Mobile SDK to Maven. However, since it's 
required for the build to run, enter `Guestbook Portlet SDK`. The following 
screenshot shows the `Context`, `Package Name`, and `POM Description` properties 
entered in the Mobile SDK Builder: 

![Figure 2: The command line wizard for building the Mobile SDK.](../../../images/mobile-sdk-build-wizard.png)

Once you enter the final property, the Mobile SDK Builder runs and generates a 
`BUILD SUCCESSFUL` message. Great! You're probably wondering, however, what just
happened. Obviously, the build completed successfully, but other than that it 
doesn't tell you much. What happened is this: the Mobile SDK Builder generated 
the source classes you'll use in your Android app to interact with your Liferay 
installation's Guestbook portlet. You can find these source classes in the 
following folder in the mobile SDK: 

    modules/guestbook-portlet/android/src/gen/java

You should also note that the source classes are in the package path you 
specified during the build, with an additional folder that denotes the 
Liferay version. Therefore, the full path to the generated source classes is:

    modules/guestbook-portlet/android/src/gen/java/com/liferay/mobile/android/v62

This folder has two subfolders that correspond to each entity in the 
Guestbook portlet: `guestbook` and `entry`. In them, you'll find the respective 
source class for each, `EntryService.java` and `GuestbookService.java`. There's 
one last thing to do before you can use these classes in your Android app: put
them in a `jar` file. 

To do this, navigate to the `modules/guestbook-portlet` folder on the command 
line and run `../../gradlew jar`. This command does two things: 

1.  Generates a `jar` file with the Guestbook portlet's service classes. This is
    in `modules/guestbook-portlet/build/libs`. From here forward, this Learning 
    Path refers to this as the Guestbook Mobile SDK. 

2.  Generates a `jar` file for use in calling Liferay's built-in remote services. 
    This is in `liferay-mobile-sdk-android-6.2.0.22/android/build/libs`. 

Congratulations! You just built the Guestbook Mobile SDK. Now that's an 
accomplishment worthy of writing down in a guestbook! All you need next is an 
Android app in which to install the Mobile SDK. The next article shows you how 
to create this app. 
