# Using Login Screenlet for Authentication [](id=using-login-screenlet-for-authentication)

For the app to retrieve data from the guestbook portlet, the app's user must 
first authenticate to the portal. The other features you'll develop in your app 
depend on successful portal authentication. You can implement authentication
using the Liferay Mobile SDK, but it takes time to write. Authenticating
using Liferay Screens takes about ten minutes. In this article, you'll use the
Login Screenlet to implement authentication in your app. 

## Adding Login Screenlet to the App [](id=adding-login-screenlet-to-the-app)

To use any Screenlet, you must follow two basic steps:

1. Insert the Screenlet's XML in the layout of the activity or fragment where you 
   want the Screenlet to appear. 

2. Implement the Screenlet's listener in the activity or fragment class.

In this app, you'll use Login Screenlet in `MainActivity`. This means you must 
insert the Screenlet's XML in `MainActivity`'s layout, `activity_main.xml`. 
You'll then implement the Screenlet's listener, `LoginListener`, in the 
`MainActivity` class. 

First, open `activity_main.xml` and delete the `TextView` generated by Android 
Studio when you created the project. Insert Login Screenlet's XML in its place: 

    <com.liferay.mobile.screens.auth.login.LoginScreenlet
        android:id="@+id/login_screenlet"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        liferay:basicAuthMethod="screen_name"
        liferay:layoutId="@layout/login_default"
        />

When prompted by Android Studio, add the following XML namespace to the 
`<RelativeLayout>` tag: 

    xmlns:liferay="http://schemas.android.com/apk/res-auto"

Note the two `liferay` attributes in the Login Screenlet's XML. The 
`liferay:basicAuthMethod` attribute tells the Screenlet to use basic 
authentication instead of OAuth. Its value, `screen_name`, tells the Screenlet 
to authenticate with the user's screen name. You can alternatively set this to 
`email` or `userId`. This Learning Path uses `screen_name` only because it's 
much faster to type a screen name than a full email address when authenticating 
in the emulator. Also, note that this value must match the authentication 
setting in the portal. By default, Liferay Portal uses email address for 
authentication. You need to set your portal to authenticate by screen name 
instead. See 
[this section in Login Screenlet's reference documentation](/develop/reference/-/knowledge_base/6-2/loginscreenlet-for-android#basic-authentication) 
for instructions on changing your portal's authentication setting. 

The second `liferay` attribute in Login Screenlet's XML is `liferay:layoutId`. 
This attribute sets the View to display the Screenlet with. The value 
`@layout/login_default` specifies the Default view. For more information on 
Views in Liferay Screens, see 
[this tutorial](/develop/tutorials/-/knowledge_base/6-2/using-views-in-android-screenlets). 
For more information on Login Screenlet's available attributes, see its 
[reference documentation](/develop/reference/-/knowledge_base/6-2/loginscreenlet-for-android). 

Next, you'll implement `LoginListener` in the `MainActivity` class. Open 
`MainActivity` and change its declaration to implement `LoginListener`. The 
class declaration should now appear as follows:

    public class MainActivity extends AppCompatActivity implements LoginListener {...

You must also add the `com.liferay.mobile.screens.auth.login.LoginListener` 
import. 

Implementing `LoginListener` requires you to implement two methods: 
`onLoginSuccess` and `onLoginFailure`. Add them to the class as follows:

    @Override
    public void onLoginSuccess(User user) {
        Toast.makeText(this, "Login successful!", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onLoginFailure(Exception e) {
        Toast.makeText(this, "Couldn't log in " + e.getMessage(), Toast.LENGTH_LONG).show();
    }

When you paste in these methods, you'll need to add the imports 
`android.widget.Toast` and`com.liferay.mobile.screens.context.User`. 

These are listener methods called, respectively, when login succeeds or fails. 
Using them lets your app respond to events that occur in the Screenlet. For the 
moment, they each only do one thing: display a success or failure message to the 
user. You'll change this shortly. Note that each Screenlet has different 
listener methods; they're listed in the Screenlet 
[reference documentation](/develop/reference/-/knowledge_base/6-2/screenlets-in-liferay-screens-for-android). 

Now you need to get a reference to the Screenlet and set the `MainActivity` 
class as its listener. To do so, add the following code to the end of the 
`onCreate` method: 

    LoginScreenlet loginScreenlet = (LoginScreenlet) findViewById(R.id.login_screenlet);
    loginScreenlet.setListener(this);

This also requires you to import 
`com.liferay.mobile.screens.auth.login.LoginScreenlet`. 

The `findViewById` method uses the Screenlet's ID from the layout to create the 
reference. The `setListener` method then sets the `MainActivity` class as the 
Login Screenlet's listener. 

Now run the app by clicking the green *play* button in the toolbar, or by 
selecting *Run 'app'* from the *Run* menu. If you've never run an emulator, 
you'll have to go through the process of choosing and installing one. Unlock the 
emulator once it launches. Your app then automatically opens to the Login 
Screenlet. Enter your credentials and click *SIGN IN*. The toast message then 
pops up saying that the login succeeded. 

![Figure 1: Login Screenlet successfully authenticated you with the portal.](../../../images/android-login-screenlet-success.png)

The toast message goes away and you remain on the login screen. Nothing else 
happens. Don't worry, this is supposed to happen; you haven't added any other 
functionality yet. You'll fix this next. 

## Navigating from Login Screenlet [](id=navigating-from-login-screenlet)

Now you need for the app to open `GuestbooksActivity` when login succeeds. 
You'll do this by using an intent in `MainActivity`'s `onLoginSuccess` method. 
In short, Android intents are messaging objects that you can use to launch other 
activities. For more information, see 
[this guide on intents in Android's documentation](http://developer.android.com/guide/components/intents-filters.html). 
To launch `GuestbooksActivity` when login succeeds, replace the contents of 
`onLoginSuccess` with the following code: 

    Intent intent = new Intent(this, GuestbooksActivity.class);
    startActivity(intent);

When login succeeds, this code creates an `Intent` and uses it to start 
`GuestbooksActivity`. If you haven't already, make sure you import 
`android.content.Intent` in `MainActivity`. 

Now you're ready to see the intent in action! Run the app in the emulator and 
log in when prompted. When login succeeds, the `GuestbooksActivity` opens. 

![Figure 2: The app takes you to the new activity after you log in.](../../../images/android-login-success-intent.png)

Nice work! You've successfully implemented portal authentication in the Android 
app. It didn't take you that long, either. You only have signing in working so
far, though; it doesn't display any portal content. Next, you'll develop Get 
Guestbooks Screenlet. 
