# Using Dynamic Data Mapping for Structures and Templates 

All Liferay portlets that support data structures or display templates make use 
of the generic API provided by the Dynamic Data Mapping (DDM) framework.
The DDM framework provides the services and GUI to handle complex XML based 
data structures and Freemarker or Velocity based templates. In previous 
versions of Liferay, portlets had their own specific APIs which are now 
deprecated.

The following Liferay portlets make use of the DDM framework:

* Dynamic Data Lists, for Data Definitions, Form Templates and Display Templates

* Document and Media, for Document Types and Metadata Sets

* Web Content, for Structures and Templates

* Application Display Templates

## Using DDM Services for Structures and Template in Custom Portlets 

`DDMStructureService` and `DDMTemplateService` are the specific classes which 
provide the API to handle complex data structures and display templates. A 
portlet developer can make use of this API to support structures and templates 
for his own application.

A `DDMStructure` is a data input definition written in XML. They refer to other 
entities through the `classNameId` field. For example, a `DDMStructure` for Web 
Content would contain the `classNameId` of the `JournalArticle` entity. Content 
generated by filling a `DDMStructure` data definition would be stored as 
`DDMContent` (using the `DDMContentService`) or in your own service structure.

`DDMTemplates` are data output displays. They render content generated from a 
specific `DDMStructure`. The `classNameId` of the `DDMTemplate` is that of the 
`DDMStructure` class, and the `classPK` is the primary key of that specific 
`DDMStructure`. A `DDMStructure` may have more than one associated 
`DDMTemplates` to render the same data in different ways, but a `DDMTemplate` 
is only valid for one `DDMStructure`.

## Customize the DDM GUI for Custom Portlets 

Apart from the services described above, the DDM framework also provides an 
graphical interface to manage structures and templates. Portlets using DDM 
services can include their own custom views for this purpose, or reuse the 
mentioned generic GUI.

Even if portlets reuse the generic GUI, developers can still define specific 
behaviors for that specific portlet. For example, displaying a custom title or 
hiding some columns in the template list. For this purpose, since Liferay 6.2 
the DDM Framework provides the `DDMDisplay` interface and the `BaseDDMDisplay` 
class.

If you want to customize how the DDM generic GUI behaves for your portlet, follow these steps:

1. Create an implementation of the DDMDisplay interface. It should extend BaseDDMDisplay so that it inherits default behaviors when not specified.
         
        public class MyPortletDDMDisplay extends BaseDDMDisplay {
        ...
        }

2. Declare this custom DDMDisplay in the liferay-portlet.xml file:
    
        <portlet>
          <ddm-display>com.liferay.portlet.myportlet.ddm.MyPortletDDMDisplay</ddm-display>
        </portlet>

You can check the `JournalDDMDisplay` class for an example.
